// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  name              String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  otp               String?
  otpExpiry         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  passwordResetTokens PasswordResetToken[]
  jobs              Job[]              // Relation to jobs created by this user
  candidates        Candidate[]        // Relation to candidates created by this user

  @@map("users")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model Job {
  id                Int       @id @default(autoincrement())
  userId            Int       // Foreign key to User
  jobTitle          String
  category          String
  location          String
  employmentType    String
  salaryRange       String
  jobDescription    String    @db.Text
  requiredSkills    String[]  // Array of skills
  requiredExperience String
  postToLinkedIn    Boolean   @default(false)
  postToIndeed      Boolean   @default(false)
  postToGlassdoor   Boolean   @default(false)
  postToMonster     Boolean   @default(false)
  enableAIMatching  Boolean   @default(false)
  searchExistingPool Boolean  @default(false)
  status            String    @default("draft") // draft, published, closed, archived
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  user              User      @relation(fields: [userId], references: [id])

  @@map("jobs")
}

model Candidate {
  id                Int       @id @default(autoincrement())
  userId            Int       // Foreign key to User
  firstName         String
  lastName          String
  email             String
  phone             String
  location          String
  currentTitle      String
  currentCompany    String
  linkedinProfile   String?
  desiredRole       String?
  salaryExpectations String?
  skills            String[]  // Array of skills
  experience        Json?     // JSON field to store experience data
  documents         Json?     // JSON field to store document URLs
  status            String    @default("active") // active, inactive, hired, archived
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  user              User      @relation(fields: [userId], references: [id])

  @@map("candidates")
}
